apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2023-02-07T14:09:07Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      application: spilo
      cluster-name: plural-console
      team: plural
    name: plural-console
    namespace: console
    resourceVersion: "18912"
    uid: 6fceaf59-1537-4fdc-be2a-aaa8706c16d1
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        application: spilo
        cluster-name: plural-console
    serviceName: plural-console
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: Helm
          application: spilo
          cluster-name: plural-console
          team: plural
        namespace: console
      spec:
        containers:
        - env:
          - name: SCOPE
            value: plural-console
          - name: PGROOT
            value: /home/postgres/pgdata/pgroot
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PGUSER_SUPERUSER
            value: postgres
          - name: KUBERNETES_SCOPE_LABEL
            value: cluster-name
          - name: KUBERNETES_ROLE_LABEL
            value: spilo-role
          - name: PGPASSWORD_SUPERUSER
            valueFrom:
              secretKeyRef:
                key: password
                name: postgres.plural-console.credentials.postgresql.acid.zalan.do
          - name: PGUSER_STANDBY
            value: standby
          - name: PGPASSWORD_STANDBY
            valueFrom:
              secretKeyRef:
                key: password
                name: standby.plural-console.credentials.postgresql.acid.zalan.do
          - name: PAM_OAUTH2
            value: https://info.example.com/oauth2/tokeninfo?access_token= uid realm=/employees
          - name: HUMAN_ROLE
            value: zalandos
          - name: PGVERSION
            value: "13"
          - name: KUBERNETES_LABELS
            value: '{"application":"spilo"}'
          - name: SPILO_CONFIGURATION
            value: '{"postgresql":{},"bootstrap":{"initdb":[{"auth-host":"md5"},{"auth-local":"trust"}],"users":{"zalandos":{"password":"","options":["CREATEDB","NOLOGIN"]}},"dcs":{}}}'
          - name: DCS_ENABLE_KUBERNETES_API
            value: "true"
          - name: AWS_SDK_LOAD_CONFIG
            value: "1"
          - name: CLONE_USE_WALG_RESTORE
            value: "true"
          - name: USE_WALG_BACKUP
            value: "true"
          - name: USE_WALG_RESTORE
            value: "true"
          - name: WAL_GS_BUCKET
            value: luegnix-luegnix-gke-postgres-wal
          - name: WAL_BUCKET_SCOPE_SUFFIX
            value: /a772a588-0784-4128-aa1a-5ca00726fae2
          - name: WAL_BUCKET_SCOPE_PREFIX
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/secrets/google/credentials.json
          image: dkr.plural.sh/postgres/acid/spilo-14:2.1-p7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8008
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: postgres
          ports:
          - containerPort: 8008
            protocol: TCP
          - containerPort: 5432
            protocol: TCP
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8008
              scheme: HTTP
            initialDelaySeconds: 6
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_NICE
            privileged: false
            readOnlyRootFilesystem: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/postgres/pgdata
            name: pgdata
          - mountPath: /dev/shm
            name: dshm
          - mountPath: /var/secrets/google
            name: postgres-gcp-creds
        - env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: postgres.plural-console.credentials.postgresql.acid.zalan.do
          - name: DATA_SOURCE_URI
            value: 127.0.0.1:5432/console?sslmode=disable
          - name: DATA_SOURCE_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: postgres.plural-console.credentials.postgresql.acid.zalan.do
          - name: DATA_SOURCE_PASS
            valueFrom:
              secretKeyRef:
                key: password
                name: postgres.plural-console.credentials.postgresql.acid.zalan.do
          image: gcr.io/pluralsh/postgres-exporter:0.8.0
          imagePullPolicy: IfNotPresent
          name: exporter
          ports:
          - containerPort: 9187
            name: http-metrics
            protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/postgres/pgdata
            name: pgdata
          - mountPath: /var/secrets/google
            name: postgres-gcp-creds
        dnsPolicy: ClusterFirst
        priorityClassName: postgres
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 103
        serviceAccount: postgres-pod
        serviceAccountName: postgres-pod
        terminationGracePeriodSeconds: 300
        volumes:
        - emptyDir:
            medium: Memory
          name: dshm
        - name: postgres-gcp-creds
          secret:
            defaultMode: 420
            secretName: postgres-gcp-creds
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: Helm
          application: spilo
          cluster-name: plural-console
          team: plural
        name: pgdata
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 25Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: plural-console-79cff65bb9
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: plural-console-79cff65bb9
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: monitoring
      meta.helm.sh/release-namespace: monitoring
      prometheus-operator-input-hash: "17745018791455153496"
    creationTimestamp: "2023-02-07T14:04:27Z"
    generation: 1
    labels:
      app: kube-prometheus-stack-alertmanager
      app.kubernetes.io/instance: monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 39.13.0
      chart: kube-prometheus-stack-39.13.0
      heritage: Helm
      release: monitoring
    name: alertmanager-monitoring-alertmanager
    namespace: monitoring
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Alertmanager
      name: monitoring-alertmanager
      uid: f0e347c6-265c-4e5d-b332-56c02dfd84b4
    resourceVersion: "15187"
    uid: cb5b8f58-049a-4709-a272-63b1fa85c57f
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        alertmanager: monitoring-alertmanager
        app.kubernetes.io/instance: monitoring-alertmanager
        app.kubernetes.io/managed-by: prometheus-operator
        app.kubernetes.io/name: alertmanager
    serviceName: alertmanager-operated
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: alertmanager
        creationTimestamp: null
        labels:
          alertmanager: monitoring-alertmanager
          app.kubernetes.io/instance: monitoring-alertmanager
          app.kubernetes.io/managed-by: prometheus-operator
          app.kubernetes.io/name: alertmanager
          app.kubernetes.io/version: 0.24.0
      spec:
        containers:
        - args:
          - --config.file=/etc/alertmanager/config/alertmanager.yaml
          - --storage.path=/alertmanager
          - --data.retention=120h
          - --cluster.listen-address=
          - --web.listen-address=:9093
          - --web.external-url=http://monitoring-alertmanager.monitoring:9093
          - --web.route-prefix=/
          - --log.level=debug
          - --cluster.peer=alertmanager-monitoring-alertmanager-0.alertmanager-operated:9094
          - --cluster.reconnect-timeout=5m
          - --web.config.file=/etc/alertmanager/web_config/web-config.yaml
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: dkr.plural.sh/monitoring/prometheus/alertmanager:v0.24.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /-/healthy
              port: http-web
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: alertmanager
          ports:
          - containerPort: 9093
            name: http-web
            protocol: TCP
          - containerPort: 9094
            name: mesh-tcp
            protocol: TCP
          - containerPort: 9094
            name: mesh-udp
            protocol: UDP
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /-/ready
              port: http-web
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/alertmanager/config
            name: config-volume
          - mountPath: /etc/alertmanager/certs
            name: tls-assets
            readOnly: true
          - mountPath: /alertmanager
            name: alertmanager-monitoring-alertmanager-db
          - mountPath: /etc/alertmanager/web_config/web-config.yaml
            name: web-config
            readOnly: true
            subPath: web-config.yaml
        - args:
          - --listen-address=:8080
          - --reload-url=http://127.0.0.1:9093/-/reload
          - --watched-dir=/etc/alertmanager/config
          - --log-level=debug
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "-1"
          image: dkr.plural.sh/monitoring/prometheus-operator/prometheus-config-reloader:v0.58.0
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 50Mi
            requests:
              cpu: 200m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/alertmanager/config
            name: config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: monitoring-alertmanager
        serviceAccountName: monitoring-alertmanager
        terminationGracePeriodSeconds: 120
        volumes:
        - name: config-volume
          secret:
            defaultMode: 420
            secretName: alertmanager-monitoring-alertmanager-generated
        - name: tls-assets
          projected:
            defaultMode: 420
            sources:
            - secret:
                name: alertmanager-monitoring-alertmanager-tls-assets-0
        - name: web-config
          secret:
            defaultMode: 420
            secretName: alertmanager-monitoring-alertmanager-web-config
        - emptyDir: {}
          name: alertmanager-monitoring-alertmanager-db
    updateStrategy:
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: alertmanager-monitoring-alertmanager-555cd57455
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: alertmanager-monitoring-alertmanager-555cd57455
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: monitoring
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2023-02-07T14:03:40Z"
    generation: 1
    labels:
      app: loki
      app.kubernetes.io/managed-by: Helm
      chart: loki-2.9.1
      heritage: Helm
      release: monitoring
    name: monitoring-loki
    namespace: monitoring
    resourceVersion: "15628"
    uid: c948f010-79c4-4cb0-9dd2-403bbb828740
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: loki
        release: monitoring
    serviceName: monitoring-loki-headless
    template:
      metadata:
        annotations:
          checksum/config: a7b584d7e943e43c23ec5f589c467c8034940a0a3be2c152d289d688954a3aae
          prometheus.io/path: /metrics
          prometheus.io/port: "3100"
          prometheus.io/scheme: http
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: loki
          name: loki
          release: monitoring
      spec:
        affinity: {}
        containers:
        - args:
          - -config.file=/etc/loki/loki.yaml
          image: dkr.plural.sh/monitoring/grafana/loki:2.4.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: loki
          ports:
          - containerPort: 3100
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/loki
            name: config
          - mountPath: /data
            name: storage
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 10001
          runAsGroup: 10001
          runAsNonRoot: true
          runAsUser: 10001
        serviceAccount: monitoring-loki
        serviceAccountName: monitoring-loki
        terminationGracePeriodSeconds: 4800
        volumes:
        - name: config
          secret:
            defaultMode: 420
            secretName: monitoring-loki
        - emptyDir: {}
          name: storage
    updateStrategy:
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: monitoring-loki-664db7749c
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: monitoring-loki-664db7749c
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: monitoring
      meta.helm.sh/release-namespace: monitoring
      prometheus-operator-input-hash: "16464645228706950892"
    creationTimestamp: "2023-02-07T14:04:28Z"
    generation: 1
    labels:
      app: kube-prometheus-stack-prometheus
      app.kubernetes.io/instance: monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: kube-prometheus-stack
      app.kubernetes.io/version: 39.13.0
      chart: kube-prometheus-stack-39.13.0
      heritage: Helm
      operator.prometheus.io/name: monitoring-prometheus
      operator.prometheus.io/shard: "0"
      release: monitoring
    name: prometheus-monitoring-prometheus
    namespace: monitoring
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: monitoring-prometheus
      uid: 5f5838c0-3b9b-4c61-98d2-fdb17b9fa685
    resourceVersion: "15561"
    uid: dda27f93-08bf-46ca-be17-01b9c9cd5c8a
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: monitoring-prometheus
        app.kubernetes.io/managed-by: prometheus-operator
        app.kubernetes.io/name: prometheus
        operator.prometheus.io/name: monitoring-prometheus
        operator.prometheus.io/shard: "0"
        prometheus: monitoring-prometheus
    serviceName: prometheus-operated
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: prometheus
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: monitoring-prometheus
          app.kubernetes.io/managed-by: prometheus-operator
          app.kubernetes.io/name: prometheus
          app.kubernetes.io/version: 2.37.0
          operator.prometheus.io/name: monitoring-prometheus
          operator.prometheus.io/shard: "0"
          prometheus: monitoring-prometheus
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --web.console.templates=/etc/prometheus/consoles
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --storage.tsdb.retention.time=10d
          - --config.file=/etc/prometheus/config_out/prometheus.env.yaml
          - --storage.tsdb.path=/prometheus
          - --web.enable-lifecycle
          - --web.external-url=http://monitoring-prometheus.monitoring:9090
          - --web.route-prefix=/
          - --web.config.file=/etc/prometheus/web_config/web-config.yaml
          image: dkr.plural.sh/monitoring/prometheus/prometheus:v2.37.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /-/healthy
              port: http-web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          name: prometheus
          ports:
          - containerPort: 9090
            name: http-web
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: http-web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            requests:
              cpu: "1"
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /-/ready
              port: http-web
              scheme: HTTP
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config_out
            name: config-out
            readOnly: true
          - mountPath: /etc/prometheus/certs
            name: tls-assets
            readOnly: true
          - mountPath: /prometheus
            name: prometheus-monitoring-prometheus-db
            subPath: prometheus-db
          - mountPath: /etc/prometheus/rules/prometheus-monitoring-prometheus-rulefiles-0
            name: prometheus-monitoring-prometheus-rulefiles-0
          - mountPath: /etc/prometheus/web_config/web-config.yaml
            name: web-config
            readOnly: true
            subPath: web-config.yaml
        - args:
          - --listen-address=:8080
          - --reload-url=http://127.0.0.1:9090/-/reload
          - --config-file=/etc/prometheus/config/prometheus.yaml.gz
          - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
          - --watched-dir=/etc/prometheus/rules/prometheus-monitoring-prometheus-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "0"
          image: dkr.plural.sh/monitoring/prometheus-operator/prometheus-config-reloader:v0.58.0
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 50Mi
            requests:
              cpu: 200m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config
            name: config
          - mountPath: /etc/prometheus/config_out
            name: config-out
          - mountPath: /etc/prometheus/rules/prometheus-monitoring-prometheus-rulefiles-0
            name: prometheus-monitoring-prometheus-rulefiles-0
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --watch-interval=0
          - --listen-address=:8080
          - --config-file=/etc/prometheus/config/prometheus.yaml.gz
          - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
          - --watched-dir=/etc/prometheus/rules/prometheus-monitoring-prometheus-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "0"
          image: dkr.plural.sh/monitoring/prometheus-operator/prometheus-config-reloader:v0.58.0
          imagePullPolicy: IfNotPresent
          name: init-config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 50Mi
            requests:
              cpu: 200m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config
            name: config
          - mountPath: /etc/prometheus/config_out
            name: config-out
          - mountPath: /etc/prometheus/rules/prometheus-monitoring-prometheus-rulefiles-0
            name: prometheus-monitoring-prometheus-rulefiles-0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: monitoring-prometheus
        serviceAccountName: monitoring-prometheus
        terminationGracePeriodSeconds: 600
        volumes:
        - name: config
          secret:
            defaultMode: 420
            secretName: prometheus-monitoring-prometheus
        - name: tls-assets
          projected:
            defaultMode: 420
            sources:
            - secret:
                name: prometheus-monitoring-prometheus-tls-assets-0
        - emptyDir: {}
          name: config-out
        - configMap:
            defaultMode: 420
            name: prometheus-monitoring-prometheus-rulefiles-0
          name: prometheus-monitoring-prometheus-rulefiles-0
        - name: web-config
          secret:
            defaultMode: 420
            secretName: prometheus-monitoring-prometheus-web-config
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        name: prometheus-monitoring-prometheus-db
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 30Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: prometheus-monitoring-prometheus-864c76785d
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: prometheus-monitoring-prometheus-864c76785d
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
